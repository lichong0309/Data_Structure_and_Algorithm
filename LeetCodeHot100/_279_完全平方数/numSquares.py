'''
给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。

完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

示例 1：
输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4

示例 2：
输入：n = 13
输出：2
解释：13 = 4 + 9
 
提示：
1 <= n <= 104
'''

class Solution:
    def numSquares(self, n: int) -> int:
        # 动态规划 背包问题

        # 创建 长度为n+1的一维数组,从0开始
        dp = [0] * (n+1)

        # 从1到n
        for i in range(1, n+1):
            dp[i] = i           # 将dp[i]初始化为最坏的情况
            # 寻找dp[i]的最小值
            # j从1开始，到int(pow(n, 0.5))
            j = 1
            while i - j*j >= 0:
                # 最小数量的完全平方数 一定包含一个完全平方数 作为 和数
                dp[i] = min(dp[i], dp[i-j*j]+1)
                j = j + 1
        return dp[n]
